
cancellationToken.ThrowIfCancellationRequested();

bool needsUpdate=false;
WorkItem parentWit = null;

if(Self.WorkItemType=="Feature")
{
	if(RelationChanges.Removed!=null && RelationChanges.Removed.Any(c=>c.Attributes.Name=="Child"))
	{
		Logger.Information($"Feature - Child Removed, dates will be recalculated");	
		needsUpdate = true;
		parentWit=Self;
	}
	if(RelationChanges.Added!=null && RelationChanges.Added.Any(c=>c.Attributes.Name=="Child"))
	{
		Logger.Information($"Feature - Child Added, dates will be recalculated");	
		needsUpdate = true;
		parentWit=Self;
	}	
}
else
{
	if(!SelfChanges.ContainsKey("System.IterationPath")) // do not run if no change
	{
		return;
	}
	needsUpdate = true;
	
	if(Self.Parent != null)
	{  
		parentWit = await Client.GetWorkItem(Self.Parent.RelatedWorkItemId);
		if(parentWit == null){
			Logger.Information($"Nothing will be done since no parent was found for Work Item Id: {Self.Id}, Title: '{Self.Title}, WorkItemType:  {Self.WorkItemType}");
			return;
		}
	}
	else
	{
	   Logger.Information($"Nothing will be done since no parent was found for Work Item Id: {Self.Id}, Title: '{Self.Title}, WorkItemType:  {Self.WorkItemType}");
	   return;
	}
}

if(needsUpdate){
	Logger.Information($"Received event type: {EventType},Work Item Id: {Self.Id}, Title: '{Self.Title}, WorkItemType:  {Self.WorkItemType}");
	await setParentIterationByChildren(parentWit);
}
     
async Task setParentIterationByChildren(WorkItem parentWit){
	
	DateTime? parentStartDate=null;
	DateTime? parentTargetDate=null;
	bool toSave = false;
	//if(parentWit.Fields.ContainsKey("Microsoft.VSTS.Scheduling.StartDate"))
	//   parentStartDate=DateTime.Parse(parentWit.Fields["Microsoft.VSTS.Scheduling.StartDate"]?.ToString());
	//if(parentWit.Fields.ContainsKey("Microsoft.VSTS.Scheduling.TargetDate"))
	//   parentTargetDate=DateTime.Parse(parentWit.Fields["Microsoft.VSTS.Scheduling.TargetDate"]?.ToString());
	//Logger.Information($"Work Item Parent found ID: {parentWit.Id},  Title: {parentWit.Title}, StartDate: {parentStartDate}, Target Date: {parentTargetDate}");
	
	DateTime? minStartDateFound=null;
	DateTime? maxTargetDateFound=null;
	foreach(var child in parentWit.Children)
	{
		var childWit = await Client.GetWorkItem(child.RelatedWorkItemId);
		if(childWit!=null)
		{
			  var iteration=childWit.Fields["System.IterationPath"] as String;
			  Logger.Debug($"WorkItem with id '{childWit.Id}' Iteration is '{iteration}'");
			  var iterDetails=await Client.GetTeamsIterationDetailsByName("GMP Team",iteration);
			  if(iterDetails==null)
				continue;

			  DateTime? startDate=iterDetails?.Attributes?.StartDate;
			  DateTime? targetDate=iterDetails?.Attributes?.FinishDate;


			  if(minStartDateFound==null || minStartDateFound>startDate){                
				 minStartDateFound=startDate;
				 Logger.Debug($"Parent Start Date will be replaced to {startDate}");
				 string formattedStartDate = startDate?.ToString("yyyy-MM-ddTHH:mm:ssZ");
				 if(parentWit.Fields.ContainsKey("Microsoft.VSTS.Scheduling.StartDate"))
					parentWit.Fields["Microsoft.VSTS.Scheduling.StartDate"]=formattedStartDate;
				 else
					parentWit.Fields.Add("Microsoft.VSTS.Scheduling.StartDate",formattedStartDate);
				 toSave=true;
			  }

			 if(maxTargetDateFound==null || maxTargetDateFound<targetDate){
				maxTargetDateFound=targetDate;
				Logger.Debug($"Parent Target Date will be replaced to {targetDate}");
				string formattedTargetDate = targetDate?.ToString("yyyy-MM-ddTHH:mm:ssZ");
				if(parentWit.Fields.ContainsKey("Microsoft.VSTS.Scheduling.TargetDate"))
				   parentWit.Fields["Microsoft.VSTS.Scheduling.TargetDate"]=formattedTargetDate;                    
				else
				   parentWit.Fields.Add("Microsoft.VSTS.Scheduling.TargetDate",formattedTargetDate);
				toSave=true;                 
			 }
		}          
	}

				  
	if(toSave==true)  {
		 await Client.SaveWorkItem(parentWit);
		 Logger.Information($"Parent work item '{parentWit.Id}' saved");
	}
}






