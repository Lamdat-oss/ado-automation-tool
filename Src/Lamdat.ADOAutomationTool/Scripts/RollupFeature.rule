if (!string.IsNullOrWhiteSpace(Self.WorkItemType) &&
    Self.WorkItemType.Equals("Feature"))
{
    // Logger.Warning("RollupFeature is executed");

    //Count bugs per feature
    var childrenEst = 0.00;
    double bugCount = 0.0;
    var featureChildren = await Self.FollowingLinks(new FollowingLinksPrms
    {
        LinkType = "System.LinkTypes.Hierarchy-Forward",
        AtMost = 7
    });
                
    foreach (var child in featureChildren)
    {
        var childTypeName = child.WorkItemType;
        
        if ((childTypeName == "Bug") || (childTypeName == "Product Backlog Item") || (childTypeName == "Glitch") )
        {						                 
            childrenEst += child.GetField<double>("Microsoft.VSTS.Scheduling.Effort", 0d);
        }
        
        if (childTypeName == "Bug")
        {
            var stateReason  = child.GetField<string>("DavidShield.StateReason");
            var state = child.GetField<string>("System.State");

            if (stateReason == "Fixed" && state != "Removed") 
            {
                bugCount++;
            }
        }
    }	
    
    
    childrenEst = childrenEst / 8;
    
    // Update effort estimation and bug count
    
    
    // Better to compare two float numbers as strings

    double selfWiTypeCount = Self.GetField<double>("Labs.WITypeCount", 0d);
    double selfDevEffortEst = Self.GetField<double>("Labs.DevEffortEst", 0d);
    
    string selfWiTypeCountStr = selfWiTypeCount.ToString("0.00");
    string selfDevEffortEstStr = selfDevEffortEst.ToString("0.00");
    string bugCountStr = bugCount.ToString("0.00");
    string childrenEstStr = childrenEst.ToString("0.00");

    var isAnyChangeInSelf = false;

    if ( ! selfWiTypeCountStr.Equals(bugCountStr) )
    {
        // Better to parse back to double a string representation of the final value
        // that was rounded and truncated to 2 digits after '.'
        bugCount = double.Parse(string.Format("{0:###0.00}", bugCountStr));
        Self.SetField("Labs.WITypeCount", bugCount);
        isAnyChangeInSelf = true;
    }
    
    
    
    if (!selfDevEffortEstStr.Equals(childrenEstStr))
    {
        // Better to parse back to double a string representation of the final value
        // that was rounded and truncated to 2 digits after '.'
        childrenEst = double.Parse(string.Format("{0:###0.00}", childrenEstStr));
        Self.SetField("Labs.DevEffortEst", childrenEst);
        isAnyChangeInSelf = true;
    }
    
    if (isAnyChangeInSelf)
    {
        Logger.Information($"Updated Feature with ID: {Self.Id}, workItemType: {Self.WorkItemType}, Labs.WITypeCount = {bugCount} and/or Labs.DevEffortEst = {childrenEst}");
    }
    
    // Determine the top-level Feature or parent Epic of the top-level Feature.
    
    var topParent = Self;
    
    while (topParent.Parent != null)
    {
        var parent = await Client.GetWorkItem(topParent.Parent.RelatedWorkItemId);
        if (parent.Id == 0) {
            Logger.Error($"Nothing will be done since no parent was found while search of top parent work item for Work Item Id: {topParent.Id}, Title: '{topParent.Title}, WorkItemType:  {topParent.WorkItemType}");
            return;
        }
        else
        {
            if (parent.WorkItemType == "Feature")
            {
                topParent = parent;
            }
            else
            {
                if (parent.WorkItemType == "Epic")
                {
                    topParent = parent;
                }
                
                break;
            }
        }
    }

    
    // Update children with its Title and Category.
    var childTasksToUpdate = await topParent.FollowingLinks(new FollowingLinksPrms
    {
        LinkType = "System.LinkTypes.Hierarchy-Forward",
        AtMost = 7,
        WhereTypeIs = "Task"
    });
    
    
    var childFeaturesToUpdate = await topParent.FollowingLinks(new FollowingLinksPrms
    {
        LinkType = "System.LinkTypes.Hierarchy-Forward",
        AtMost = 7,
        WhereTypeIs = "Feature"
    });
    
    

    // Use the top-level Feature's Title and Labs.Category for updating children.
    
    var updateTitle = topParent.GetField<string>("System.Title");
    var updateCategory = topParent.GetField<string>("Labs.Category");
    
    foreach (var child in childTasksToUpdate)
    {
        var isAnyChangeInTask = false;
            
        if (child.GetField<string>("Labs.ParentTitle") != updateTitle)
        {
            child.SetField("Labs.ParentTitle", updateTitle);
            isAnyChangeInTask = true;
        }
            
        if (child.GetField<string>("Labs.Category") != updateCategory)
        {
            child.SetField("Labs.Category", updateCategory);
            isAnyChangeInTask = true;
        }

        if (isAnyChangeInTask)
        {
            await Client.SaveWorkItem(child, true);
            Logger.Information($"Updated Task with ID: {child.Id}, workItemType: {child.WorkItemType}, Labs.ParentTitle = {updateTitle} and/or Labs.Category = {updateCategory}");
        }
    }
    
    
    foreach (var childF in childFeaturesToUpdate)
    {
        if (childF.GetField<string>("Labs.Category") != updateCategory)
        {
            childF.SetField("Labs.Category", updateCategory);
                
            await Client.SaveWorkItem(childF, true);
            Logger.Information($"Updated Feature with ID: {childF.Id}, workItemType: {childF.WorkItemType}, Labs.Category = {updateCategory}");
        }          
    }


    // If the top-level Feature has a parent and that parent is an Epic, aggregate and update the Epic.
    if (topParent.WorkItemType == "Epic")
    {
        double calcEstimate = 0.0;
        double calcRequiredEffort = 0.0;
        double devCompletedWork = 0.0;

        foreach (var childF in childFeaturesToUpdate)
        {
            calcEstimate += childF.GetField<double>("Passportcard.Estimate", 0d);
            calcRequiredEffort += childF.GetField<double>("Microsoft.VSTS.Scheduling.Effort", 0d);

            //Sum Dev Completed Work
            devCompletedWork += childF.GetField<double>("Labs.DevCompletedWork", 0d);            
        }

        var isAnyChangeInTopEpic = false;
        
        double topParentEpicDevCompletedWork = topParent.GetField<double>("Labs.DevCompletedWork", 0d);
        double topParentEpicEstimate = topParent.GetField<double>("Passportcard.Estimate", 0d);
        double topParentEpicEffort = topParent.GetField<double>("Microsoft.VSTS.Scheduling.Effort", 0d);

        string devCompletedWorkStr = devCompletedWork.ToString("0.00");
        string calcEstimateStr = calcEstimate.ToString("0.00");
        string calcRequiredEffortStr = calcRequiredEffort.ToString("0.00");
        
        string topParentEpicDevCompletedWorkStr = topParentEpicDevCompletedWork.ToString("0.00");
        string topParentEpicEstimateStr = topParentEpicEstimate.ToString("0.00");
        string topParentEpicEffortStr = topParentEpicEffort.ToString("0.00");
        
        if ( ! topParentEpicDevCompletedWorkStr.Equals(devCompletedWorkStr))
        {
            devCompletedWork = double.Parse(string.Format("{0:###0.00}", devCompletedWorkStr));
            topParent.SetField("Labs.DevCompletedWork", devCompletedWork);
            isAnyChangeInTopEpic = true;
        }
        if ( ! topParentEpicEstimateStr.Equals(calcEstimateStr))
        {
            calcEstimate = double.Parse(string.Format("{0:###0.00}", calcEstimateStr));
            topParent.SetField("Passportcard.Estimate", calcEstimate);
            isAnyChangeInTopEpic = true;
        }
        if ( ! topParentEpicEffortStr.Equals(calcRequiredEffortStr))
        {
            calcRequiredEffort = double.Parse(string.Format("{0:###0.00}", calcRequiredEffortStr));
            topParent.SetField("Microsoft.VSTS.Scheduling.Effort", calcRequiredEffort);
            isAnyChangeInTopEpic = true;
        }

        if (isAnyChangeInTopEpic)
        {
            await Client.SaveWorkItem(topParent, true);
            Logger.Information($"Updated top parent Epic with ID: {topParent.Id}, workItemType: {topParent.WorkItemType}, Labs.DevCompletedWork = {devCompletedWork}, Passportcard.Estimate = {calcEstimate}, Microsoft.VSTS.Scheduling.Effort = {calcRequiredEffort}");
        }
    }  
}