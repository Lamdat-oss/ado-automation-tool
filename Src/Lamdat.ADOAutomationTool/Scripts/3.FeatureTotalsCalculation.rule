// Feature Totals Calculation Webhook Script
// This script runs when a Feature work item is saved and calculates total fields 
// from individual discipline/group fields:
// - TotalEffortEstimation from all *EffortEstimation fields  
// - TotalRemainingWork from all *RemainingWork fields

cancellationToken.ThrowIfCancellationRequested();

// Only process Feature work items
if (Self.WorkItemType != "Feature")
{
    return;
}

Logger.Information($"Processing Feature totals calculation for Work Item {Self.Id}: {Self.Title}");

try
{
    bool needsUpdate = false;

    

    // Calculate TotalEffortEstimation from all discipline estimation fields
    var totalEffortEstimation = 
        (Self.GetField<double?>("Custom.DevelopmentEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.QAEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.POEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.AdminEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.OthersEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.InfraEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.CapabilitiesEffortEstimation") ?? 0) +
        (Self.GetField<double?>("Custom.UnProductiveEffortEstimation") ?? 0);

    // Calculate TotalRemainingWork from all discipline remaining work fields
    var totalRemainingWork = 
        (Self.GetField<double?>("Custom.DevelopmentRemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.QARemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.PORemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.AdminRemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.OthersRemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.InfraRemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.CapabilitiesRemainingWork") ?? 0) +
        (Self.GetField<double?>("Custom.UnProductiveRemainingWork") ?? 0);

    
    totalEffortEstimation = Math.Round(totalEffortEstimation, 2);
    totalRemainingWork = Math.Round(totalRemainingWork, 2);

    
    // Update TotalEffortEstimation fields
    var currentEffortEstimation = Self.GetField<double?>("Microsoft.VSTS.Scheduling.Effort") ?? 0;
    if (Math.Abs(currentEffortEstimation - totalEffortEstimation) > 0.01)
    {
        Self.SetField("Microsoft.VSTS.Scheduling.Effort", totalEffortEstimation);
        Self.SetField("Custom.TotalEffortEstimation", totalEffortEstimation);
        needsUpdate = true;
        Logger.Debug($"Updated EffortEstimation: {currentEffortEstimation} -> {totalEffortEstimation}");
    }

    // Update TotalRemainingWork fields
    var currentRemainingWork = Self.GetField<double?>("Microsoft.VSTS.Scheduling.RemainingWork") ?? 0;
    if (Math.Abs(currentRemainingWork - totalRemainingWork) > 0.01)
    {
        Self.SetField("Microsoft.VSTS.Scheduling.RemainingWork", totalRemainingWork);
        needsUpdate = true;
        Logger.Debug($"Updated RemainingWork: {currentRemainingWork} -> {totalRemainingWork}");
    }

    if (needsUpdate)
    {
        await Client.SaveWorkItem(Self);
        Logger.Information($"Feature {Self.Id} totals updated - EffortEstimation: {totalEffortEstimation}, RemainingWork: {totalRemainingWork}");
    }
    else
    {
        Logger.Debug($"Feature {Self.Id} totals are already correct - no update needed");
    }
}
catch (Exception ex)
{
    Logger.Error(ex, $"Error calculating totals for Feature {Self.Id}: {ex.Message}");
}