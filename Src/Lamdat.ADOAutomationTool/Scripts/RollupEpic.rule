if (!string.IsNullOrWhiteSpace(Self.WorkItemType) &&
    Self.WorkItemType.Equals("Epic"))
{
    // Logger.Warning($"RollupEpic is executed");    
    
    /* Commented as the search for childEpics has no any effect.
       In any case (childEpics != null) == True */
    
    // var	childEpics = Self.FollowingLinks(new FollowingLinksPrms
    // {
    //     LinkType = "System.LinkTypes.Hierarchy-Forward",
    //     WhereTypeIs = "Epic",
    //     AtMost = 1
    // }).Result;
    //
    // if (childEpics != null )
    // {
    
    
    
        // Update Epic Totals
        var	childFeature = Self.FollowingLinks(new FollowingLinksPrms
        {
            LinkType = "System.LinkTypes.Hierarchy-Forward",
            WhereTypeIs = "Feature",
            AtMost = 7,
        }).Result;

        var calcEstimate = 0.00;
        var calcRequiredEffort = 0.00;
        var devCompletedWork = 0.00;

        foreach (var childF in childFeature)
        {
            //Sum Dev Completed Work
            devCompletedWork += childF.GetField<double>("Labs.DevCompletedWork", 0d);

            // Sum estimation effort  & estimated Remaining effort needed
            calcEstimate += childF.GetField<double>("Passportcard.Estimate", 0d);
            calcRequiredEffort += childF.GetField<double>("Microsoft.VSTS.Scheduling.Effort", 0d);
        }
        // Logger.Information($"RollupEpic is executed for ID: {Self.Id} workItemType: {Self.WorkItemType} calcEstimate: {calcEstimate} calcRequiredEffort: {calcRequiredEffort}");

        double selfDevCompletedWork = Self.GetField<double>("Labs.DevCompletedWork", 0d);
        double selfEstimate = Self.GetField<double>("Passportcard.Estimate", 0d);
        double selfEffort = Self.GetField<double>("Microsoft.VSTS.Scheduling.Effort", 0d);
        
        
        
        // Better to compare two float numbers as strings
        
        string newDevCompletedWorkStr = devCompletedWork.ToString("0.00");
        string newEstimateStr = calcEstimate.ToString("0.00");
        string newEffortStr = calcRequiredEffort.ToString("0.00");
        
        string selfDevCompletedWorkStr = selfDevCompletedWork.ToString("0.00");
        string selfEstimateStr = selfEstimate.ToString("0.00");
        string selfEffortStr = selfEffort.ToString("0.00");
        
        var isAnyChange = false;
        
        if ( ! selfDevCompletedWorkStr.Equals(newDevCompletedWorkStr) )
        {
            // Better to parse back to double a string representation of the final value
            // that was rounded and truncated to 2 digits after '.'
            devCompletedWork = double.Parse(string.Format("{0:###0.00}", newDevCompletedWorkStr));
             
            Self.SetField("Labs.DevCompletedWork", devCompletedWork);
            isAnyChange = true;
        }
        
        if ( ! selfEstimateStr.Equals(newEstimateStr) )
        {
            // Better to parse back to double a string representation of the final value
            // that was rounded and truncated to 2 digits after '.'
            calcEstimate = double.Parse(string.Format("{0:###0.00}", newEstimateStr));
            
            Self.SetField("Passportcard.Estimate", calcEstimate);
            isAnyChange = true;
        }
        
        if ( ! selfEffortStr.Equals(newEffortStr) )
        {
            // Better to parse back to double a string representation of the final value
            // that was rounded and truncated to 2 digits after '.'
            calcRequiredEffort = double.Parse(string.Format("{0:###0.00}", newEffortStr));
            
            Self.SetField("Microsoft.VSTS.Scheduling.Effort", calcRequiredEffort);
            isAnyChange = true;
        }
        
        if (isAnyChange) 
        {
            Logger.Information($"Updated Epic with ID: {Self.Id}, workItemType: {Self.WorkItemType}, calcEstimate: {calcEstimate}, calcRequiredEffort: {calcRequiredEffort}, devCompletedWork: {devCompletedWork}");
        }
    // }
}